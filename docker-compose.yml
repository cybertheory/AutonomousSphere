version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
      - registry
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/autonomoussphere
      - REDIS_URL=redis://redis:6379/0
      - REGISTRY_URL=http://registry:8081
    networks:
      - autonomoussphere-network

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=autonomoussphere
    ports:
      - "5432:5432"
    networks:
      - autonomoussphere-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - autonomoussphere-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  registry:
    build:
      context: ./registry_service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    volumes:
      - ./registry_service:/app
    networks:
      - autonomoussphere-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/"]
      interval: 10s
      timeout: 5s
      retries: 3

  example-agent:
    build:
      context: ./example_agent
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./example_agent:/app
      - ./base_agent:/app/base_agent
    environment:
      - AGENT_NAME=ExampleAgent
      - AGENT_URL=http://example-agent:8080
      - REGISTRY_URL=http://registry:8081
      - CHAT_SERVICE_URL=http://api:8000
    networks:
      - autonomoussphere-network
    depends_on:
      - registry

networks:
  autonomoussphere-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: